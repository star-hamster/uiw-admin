{"version":3,"file":"static/js/608.801758ae.chunk.js","mappings":"8GACA,WACIA,WAAY,CAAG,EACfC,KAAM,CAAC,EACPC,OAAQ,w6F","sources":["pages/auth/README.md"],"sourcesContent":["\nexport default {\n    components: {  },\n    data: {},\n    source: \"# 权限管理\\n\\n## 一、简介\\n在项目中经常有的场景是不同的用户的权限不同，通常有如下场景：\\n- 不同的用户在页面中可以看到的元素和操作不同\\n- 不同的用户对页面的访问权限不同\\n\\n```bash\\n针对这些场景，我们为中台场景下常用的权限控制提供了一种更加简单、易用、通用的解决方案。实现了一个基于 umi 插件的权限管\\n理方案 - @uiw-admin/authorized。通过定义权限，使用权限，完成 React 组件内的执行权限控制，渲染权限控制。搭配 \\n@uiw-admin/basic-layouts 插件一起使用，还可以进一步完成对路由权限的控制。\\n```\\n\\n## 二、路由和菜单\\n当项目需要根据权限判断组件是否展示 使用组件时，请在 .kktprc.ts文件中配置全局变量(define)中AUTH=true\\n```diff\\nimport config from \\\"@uiw-admin/config\\\"\\nexport default config({\\n  define:{\\n+    AUTH:true,\\n    //  ...\\n  }\\n  //  ...\\n})\\n```\\n如果是路由权限判断,请在route.json中添加对应菜单的权限``isAuth``\\n```json\\n[\\n  {\\n    \\\"path\\\": \\\"/new\\\",\\n    \\\"name\\\": \\\"新页面\\\",\\n    \\\"element\\\": \\\"@page/NewPage\\\",\\n    \\\"icon\\\": \\\"home\\\",\\n    \\\"isAuth\\\":true\\n  },\\n]\\n```\\n\\n然后在BasicLayout.tsx,使用 ``AuthPage``组件\\n```jsx\\nimport AuthPage  from \\\"@uiw-admin/authorized\\\"\\nimport BasicLayout from '@uiw-admin/BasicLayout'\\nexport default ()=>{\\n  return (\\n    <AuthPage authority={true} redirectPath=\\\"/login\\\">\\n      <BasicLayout />\\n    </AuthPage>\\n  )\\n}\\n```\\n\\n## 三、页面中控件权限控制\\n```jsx\\nimport React from \\\"react\\\"\\nimport { AuthBtn } from \\\"@uiw-admin/authorized\\\"\\n\\nconst Demos = ()=>{\\n  return (\\n   <div>\\n     <AuthBtn path=\\\"/dom/save\\\" >\\n       子集渲染1\\n     </AuthBtn>\\n     <AuthBtn path=\\\"/dom/edit\\\" disabled >\\n       <button>子集渲染2</button>\\n     </AuthBtn>\\n      <AuthBtn path=\\\"/dom/edit1\\\" disabled >\\n       <button>子集渲染3</button>\\n     </AuthBtn>\\n      <AuthBtn path=\\\"/dom/edit1\\\"  >\\n       <button>子集渲染4</button>\\n     </AuthBtn>\\n   </div>\\n  )\\n}\\nexport default Demos\\n```\"\n  }"],"names":["components","data","source"],"sourceRoot":""}