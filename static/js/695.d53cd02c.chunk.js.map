{"version":3,"file":"static/js/695.d53cd02c.chunk.js","mappings":"8GACA,WACIA,WAAY,CAAG,EACfC,KAAM,CAAC,EACPC,OAAQ,6mO","sources":["pages/request/README.md"],"sourcesContent":["\nexport default {\n    components: {  },\n    data: {},\n    source: \"# 网络请求\\n\\n对于中后台应用来说，很大一部分工作就在于请求后端的 CRUD 的接口，为进一步降低用户对请求层的感知，我们集成了接口请求方案。同时通过业务总结出一套标准的接口结构规范，并提供统一的接口解析、错误处理的能力。\\n\\n## @kkt/request\\n\\nkkt内置请求方案。配置 `queryClient`开启。 `@kkt/request` 内置了 `react-query`（和 [`@tanstack/react-query`](https://npmjs.com/@tanstack/react-query)<!--rehype:target=__blank--> 是同一个）请求方案。更多 API 方法请查看 [react-query 官方文档](https://tanstack.com/query/latest)。\\n\\n**`kktp`配置文件**\\n\\n```ts\\n// .kktprc.ts\\nexport default {\\n  queryClient: true\\n}\\n```\\n\\n```js\\nimport { useReactQuery, useReactMutation, queryClient, fetchFn } from '@kkt/request';\\n// OR\\nimport { useReactQuery, useReactMutation, queryClient, fetchFn } from '@kkt/pro';\\n```\\n\\n**useReactQuery**\\n\\n主要用于**默认**触发请求数据，默认 `GET` 请求，变更使用 `method=\\\"POST\\\"` 参数配置\\n\\n```jsx\\nuseReactQuery({ \\n  queryKey: ['user', userId], \\n  url: `/api/user/list?id=${userId}`\\n});\\n```\\n<!--rehype:style=background:#00de2247;border: 0;-->\\n\\n👆👆👆👆 上面是**推荐**使用 👆👆👆👆👆\\n\\n```jsx\\nimport { fetchFn, useReactQuery } from '@kkt/request';\\n\\nuseReactQuery({ queryKey: ['user'], url: '/api/user/list' });\\nuseReactQuery({ queryKey: ['user'], url: '/api/user/list', method: 'POST' });\\nuseReactQuery({ queryKey: ['user', userId], queryFn: () => fetchFn(`/api/user/list?id=${userId}`) });\\nuseReactQuery({\\n  queryKey: ['user', userId],\\n  queryFn: async () => {\\n    return fetchFn(`/api/user/list?id=${userId}`);\\n  },\\n});\\nuseReactQuery({\\n  queryKey: ['user', userId],\\n  queryFn: ({ queryKey }) => fetchFn(`/api/user/list?id=${queryKey[1]}`);,\\n});\\nuseReactQuery({\\n  queryKey: ['user'],\\n  url: '/api/user/list',\\n  initialData: [....],\\n});\\n\\nconst { isInitialLoading, isError, data, error, refetch, isFetching } = useQuery(...)\\n```\\n\\n示例\\n\\n```javascript\\nimport { useReactQuery } from '@kkt/request';\\n\\nexport default function HomePage() {\\n  const { isLoading, isError, data } = useReactQuery({\\n    url: `/api/user/list`,\\n    queryKey: ['user-list'],\\n  });\\n\\n  return (\\n    <div>\\n      <p className=\\\"title\\\">x react-query</p>\\n      {isError && <p>请求 API 错误 ...</p>}\\n      {isLoading && <p>Loading ...</p>}\\n      {data && <p>现在有 {data.stargazers_count} 颗星！</p>}\\n    </div>\\n  );\\n}\\n```\\n\\n更多参数及实例才考[@kkt/request](https://kktjs.github.io/kkt-pro/#/doc/request)\\n\\n## request\\n\\n`@uiw-admin/utils` 内置`request`方法。系统的请求基于axios进行了二次封装，参见[axios](https://axios-http.com/)\\n\\n```js\\nimport { request } from \\\"@uiw-admin/utils\\\"\\n```\\n\\n**方法**\\n基于restful规范，提供了2个方法：\\n- get 获取服务端数据，参数拼接在url上，以 query string 方式发送给后端\\n- post 新增数据，参数以body形式发送给后端\\n\\n\\n**参数**\\n\\n| 参数    | 说明     | 类型           | 默认值 |\\n| :------ | :------- | :------------- | :----- |\\n| url | 请求地址 | string        | -      |\\n| options   | 请求配置，即axios的配置，     | Options         | -     |\\n\\n**Options**\\n| 参数    | 说明     | 类型           | 默认值 |\\n| :------ | :------- | :------------- | :----- |\\n| body | 请求传递给后端的参数 | any      | -      |\\n| requestType   | 数据格式    | 'form' 或 'json' 或 'urlencoded'        | -     |\\n\\n**调用方式**\\n\\n**✨配和swr调用**\\n> 如果已全局配置过swr,可不用传入request\\n\\n```tsx\\nimport React from 'react'\\nimport useSWR from 'swr';\\nimport { request } from \\\"@uiw-admin/utils\\\"\\n\\nexport default const Index = () => {\\n  const [ name ,setName ] = React.useState('')\\n  const { mutate } = useSWR(\\n    ['/api/selectById',{ method: 'POST', body: {id:1} }],\\n    request,\\n    {\\n      revalidateOnMount: false,\\n      revalidateOnFocus: false,\\n      onSuccess: (data) => {\\n        if (data && data.code === 200) {\\n          setName(data.data)\\n         }\\n      },\\n    }\\n  )\\n\\n  React.useEffect(()=>mutate(false),[mutate])\\n\\n  return <div>{name}</div>\\n}\\n\\n```\\n**在rematch中使用**\\n\\n> 在servers/index.js中\\n```ts\\nimport { request } from \\\"@uiw-admin/utils\\\"\\n\\nexport const selectById  = (params:{id:string}) => request(\\\"/api/selectById\\\",{ method:\\\"POST\\\",body: { ...params } })\\n\\n```\\n> 在model/index.ts中\\n```ts\\nimport { RootModel, createModel } from '@kkt/pro';\\nimport { selectById } from '../servers';\\n\\nconst index = createModel<RootModel>()({\\n  name: 'index',\\n  state: {\\n    name:''\\n  },\\n  reducers: {\\n    updateState: (state: any, payload: any) => ({\\n      ...state,\\n      ...payload,\\n    }),\\n  },\\n  effects: (dispatch) => ({\\n    async selectById(payload: {id:string}) {\\n      const dph = dispatch\\n      const data = await selectById(payload)\\n      if (data.code === 200) {\\n        dph.index.dispatch({\\n          type:\\\"updateState\\\",\\n          payload:{\\n            name:data.data || ''\\n          }\\n        })\\n      }\\n    },\\n  }),\\n})\\nexport default index\\n\\n```\\n\\n> 在页面中调用\\n```tsx\\nimport React from 'react';\\nimport { useDispatch, useSelector, RootState, Dispatch } from '@kkt/pro';\\n\\nexport default const Index = () => {\\n  const dispatch = useDispatch<Dispatch>()\\n  const stores = useSelector((state: RootState) => state) || {}\\n  const { index:{ name } } = stores\\n  React.useEffect(()=>{\\n     dispatch({\\n      type: 'index/selectById',\\n      payload:{id:1},\\n    })\\n  },[])\\n  return <div>{name}</div>\\n}\\n\\n```\\n\\n## ❤️贡献者\\n\\n感谢所有的贡献者，欢迎开发者为开源项目贡献力量。\\n\\n<a href=\\\"https://github.com/uiwjs/uiw-admin/graphs/contributors\\\">\\n  <img src=\\\"https://uiwjs.github.io/uiw-admin/CONTRIBUTORS.svg\\\" />\\n</a>\\n\\n## License\\n\\nLicensed under the MIT License.\"\n  }"],"names":["components","data","source"],"sourceRoot":""}