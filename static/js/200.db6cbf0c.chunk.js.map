{"version":3,"file":"static/js/200.db6cbf0c.chunk.js","mappings":"6GACA,WACIA,WAAY,CAAG,EACfC,KAAM,CAAC,EACPC,OAAQ,+1U","sources":["pages/proxy/README.md"],"sourcesContent":["\nexport default {\n    components: {  },\n    data: {},\n    source: \"# 代理\\n在前后端分离的今天，跨域也成了每个前端工程师都需要了解的基本知识，在各种面试题中的日经话题。这个文章就是想总结一下关于同源策略的前世今生，以及怎么解决它。\\n\\n## 同源策略\\n在[MDN](https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy)中我们可以看到关于同源策略是一个安全机制。详细的说明如下：\\n\\n```bash\\n同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制。\\n```\\n这个机制本身出发点是很好的，但是同源的限制非常严格，url，端口任一不同都会造成跨域错误。\\n![](https://user-images.githubusercontent.com/59959718/227846530-0b341502-b59e-4606-be22-04c60806e4db.png)\\n\\n而且在控制台中你不会发现任何问题。随着前后端分离越来越普遍，这件事就越来越常见。那么它应该如何解决呢?\\n\\n同源策略全称叫《浏览器的同源策略》，它是浏览器内建的一种安全机制。那么我们不要使用浏览器请求就能完美解决问题了。对于前端来说最方便的自然就是 node.js 了。\\n\\n## 在开发中使用\\n\\n```ts\\n// mocker/index.ts\\nconst proxy = {\\n  // mocker 获取用户信息接口\\n  'GET /api/user': { id: 1, username: 'kenny', sex: 6 },\\n  'POST /api/user': { id: 1, username: 'kenny', sex: 6 },\\n  /** 用于开发的代理服务，保持代理服务 host 的值为本机开发 IP，否则为代理服务 IP */\\n  _proxy: {\\n    changeHost: false,\\n    /** 用于开发的代理服务 */\\n    proxy: {\\n      '/api/access/auth': 'http://10.10.101.96:8899/emt/',\\n    },\\n  }\\n};\\n\\nmodule.exports = proxy;\\n```\\n\\n## 目录文件约定\\n\\n约定 `./mocker/index.js`<!--rehype:style=color:white;background:#00b86c;--> 文件为 `mock` 入口文件，例如这样的目录结构：\\n\\n```bash {4}\\n.\\n├── src\\n├── mocker\\n│   └── index.ts       # 配置代理\\n```\\n\\n在此文件中也可以用于**代理**的配置\\n\\n## 配置代理\\n\\n在约定 `./mocker/index.ts`<!--rehype:style=color:white;background:#00b86c;--> 文件中添加 `_proxy` 代理配置，在此配置支持**热更新**，不用重启服务。\\n\\n```ts\\nmodule.exports = {\\n  _proxy: {\\n    proxy: {\\n      // 将路径字符串（例如 /user/:name）转换为正则表达式。\\n      // https://www.npmjs.com/package/path-to-regexp\\n      '/repos/(.*)': 'https://api.github.com/',\\n      '/:owner/:repo/raw/:ref/(.*)': 'http://127.0.0.1:2018',\\n      '/api/repos/(.*)': 'http://127.0.0.1:3721/'\\n    },\\n    // 重写目标 url 路径。 对象键将用作正则表达式以匹配路径\\n    // https://github.com/jaywcjlove/mocker-api/issues/62\\n    pathRewrite: {\\n      '^/api/repos/': '/repos/',\\n    },\\n    // 修改 host 选项，为代理服务的 IP 设为 false 禁用这一功能\\n    changeHost: false,\\n    // 修改 http-proxy 选项\\n    httpProxy: {\\n      options: {\\n        ignorePath: true,\\n      },\\n      listeners: {\\n        proxyReq: function (proxyReq, req, res, options) {\\n          console.log('proxyReq');\\n        },\\n      },\\n    },    \\n  },\\n};\\n```\\n\\n## 约定代理配置\\n\\n在 `src` 目录中也存在约定代理配置 `src/setupProxy.js`<!--rehype:style=color:white;background:#00b86c;--> 下建立文件，如果代理选项不够灵活，您可以直接访问 **Express** 应用程序实例并连接自己的代理中间件。\\n\\n- 不推荐：~~`src/setupProxy.js`~~，但是更加灵活，如果代理选项不够灵活，可结合它一起使用\\n- **推荐**：模拟 API 中配置代理，`./mocker/index.js`<!--rehype:style=color:white;background:#00b86c;--> 中配置，支持热更新\\n\\n```bash {3}\\n.\\n├── src\\n│   └── setupProxy.js  # 配置代理\\n```\\n\\n```bash\\n$ npm install http-proxy-middleware --save\\n$ # or\\n$ yarn add http-proxy-middleware\\n```\\n\\n接下来，创建 **`src/setupProxy.js`** 并在其中放置以下内容：\\n\\n```ts\\nconst { createProxyMiddleware } = require('http-proxy-middleware');\\n\\nmodule.exports = function(app) {\\n  // ...\\n};\\n```\\n\\n您现在可以根据需要注册代理了！下面是使用上述 **http-proxy-middleware** 的示例：\\n\\n```ts\\nimport express from 'express';\\nconst { createProxyMiddleware } = require('http-proxy-middleware');\\n\\nmodule.exports = function(app: express.Application) {\\n  app.use(\\n    '/api',\\n    createProxyMiddleware({\\n      target: 'http://localhost:5000',\\n      changeOrigin: true,\\n    })\\n  );\\n};\\n```\\n\\n- 注意：您不需要在任何地方导入此文件。当您启动开发服务器时，它会自动注册。\\n- 注意：此文件仅支持 Node 的 JavaScript 语法。确保只使用受支持的语言功能（即不支持~~Flow~~、~~ES~~模块等）。\\n- 注意：将路径传递给代理函数允许您在路径上使用**通配符** 和/或 模式匹配，这比快速路由匹配更灵活。\\n\\n使用 `.kktprc.ts` 同样支持直接访问 **Express** 应用程序\\n\\n```javascript\\n// .kktprc.ts\\nimport type { WebpackConfiguration, LoaderConfOptions } from 'kkt';\\nimport express from 'express';\\nconst { createProxyMiddleware } = require('http-proxy-middleware');\\n\\nexport default {\\n  // ...\\n  overrideWebpack:(conf: WebpackConfiguration, env: 'development' | 'production', options: LoaderConfOptions | undefined)=>{\\n    conf.proxySetup = (app: express.Application) => {\\n      app.use('/api', createProxyMiddleware({\\n        target: 'http://localhost:5000',\\n        changeOrigin: true,\\n      }));\\n    };\\n    return conf;\\n  }\\n}\\n```\\n或者直接使用`proxySetup`来配置\\n```ts\\n// .kktprc.ts\\nimport express from 'express';\\nconst { createProxyMiddleware } = require('http-proxy-middleware');\\n\\nexport default {\\n  // ...\\n  proxySetup: (app: express.Application) => {\\n    app.use('/api', createProxyMiddleware({\\n      target: 'http://localhost:5000',\\n      changeOrigin: true,\\n    }));\\n  }\\n}\\n```\\n\\n## 修改约定 mocker 入口配置\\n\\n可以在 `.kktprc.ts`<!--rehype:style=color:white;background:#00b86c;--> 修改默认约定 [`mock`](https://www.npmjs.com/package/mocker-api) 入口配置和代理\\n\\n```ts\\n// .kktprc.ts\\nimport express from 'express';\\nimport type { WebpackConfiguration, LoaderConfOptions } from 'kkt';\\nconst { createProxyMiddleware } = require('http-proxy-middleware');\\n\\nconst proxySetup = (app: express.Application) => {\\n  /** 支持直接访问 Express 应用程序 */\\n  app.use('/api', createProxyMiddleware({\\n    target: 'http://localhost:5000',\\n    changeOrigin: true,\\n  }));\\n  /** Mocker API Options */\\n  return {\\n    path: path.resolve('./mocker/index.js'),\\n    option: {\\n      proxy: {\\n        '/repos/(.*)': 'https://api.github.com/',\\n      },\\n      changeHost: false,\\n    }\\n  }\\n}\\n\\n/**\\n * 🚧🚧🚧 对于 webpack 不了解的，不建议使用此配置 🚧🚧🚧\\n */\\nexport default {\\n  // ...\\n  overrideWebpack:(conf: WebpackConfiguration, env: 'development' | 'production', options: LoaderConfOptions | undefined)=>{\\n    // 编译用于开发或生产的 React 应用程序时要使用的 Webpack 配置\\n    // ...添加你的 webpack 配置\\n    conf.proxySetup = proxySetup;\\n    return conf;\\n  }\\n}\\n```\\n\\n## 贡献者\\n\\n感谢所有的贡献者，欢迎开发者为开源项目贡献力量。\\n\\n<a href=\\\"https://github.com/uiwjs/uiw-admin/graphs/contributors\\\">\\n  <img src=\\\"https://uiwjs.github.io/uiw-admin/CONTRIBUTORS.svg\\\" />\\n</a>\\n\\n## License\\n\\nLicensed under the MIT License.\"\n  }"],"names":["components","data","source"],"sourceRoot":""}